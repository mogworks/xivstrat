---
import type { Time } from '@/lib/utils'

import { Image } from 'astro:assets'

import Separator from '@/components/Separator.astro'
import StratLink from '@/components/StratLink.astro'
import Span from '@/components/Span.vue'
import StratBoard from '@/components/StratBoard.astro'
import CastSection from '@/components/section/CastSection.astro'
import ListDot from '@/components/ListDot.astro'
import MechanicSection from '@/components/section/MechanicSection.astro'
import NoteSection from '@/components/section/NoteSection.astro'
import SolutionSection from '@/components/section/SolutionSection.astro'

import BurnBabyBurn from '../_components/BurnBabyBurn.astro'

import funky_floor_solution_A from '@/assets/07/m5s/funky_floor/solution_1.png'
import funky_floor_solution_B from '@/assets/07/m5s/funky_floor/solution_2.png'
import funky_floor_implementation_1 from '@/assets/07/m5s/funky_floor/implementation_1.png'
import funky_floor_implementation_2 from '@/assets/07/m5s/funky_floor/implementation_2.png'
import funky_floor_implementation_3 from '@/assets/07/m5s/funky_floor/implementation_3.png'
import funky_floor_implementation_4 from '@/assets/07/m5s/funky_floor/implementation_4.png'
import { translations } from '../_translations'

interface Props {
  start: Time
  base?: Time
}

const { start, base = 0 }: Props = Astro.props
---

<CastSection start={start} base={base} duration={2.2} ability={translations.funkyFloor} />
<MechanicSection>
  <div class="flex flex-col gap-4">
    <div class="paragraph">
      地面出现间隔的
      <Span variant="rose">AoE区域</Span>
      和8盏
      <Span variant="cyan">聚光灯</Span>
      ，
      <Span variant="rose">AoE区域</Span>
      和
      <Span variant="cyan">聚光灯</Span>
      位置会不断变化
    </div>
    <div class="flex gap-4">
      <StratBoard
        width={500}
        height={500}
        key="funky-floor"
        class="max-h-112.5 max-w-112.5 shrink"
        canvasClass="h-full w-full border-2 border-amber-800/75 dark:border-amber-100"
      />
      <div class="shrink-0 grow space-y-4">
        <div class="paragraph">
          <Span variant="rose">地面AoE</Span>
          每4秒交替变化，完整周期为
          <Span variant="pink">8</Span>
          秒
        </div>
        <div class="paragraph">
          <Span variant="cyan">聚光灯</Span>
          则按移动4秒、停止4秒的节奏循环
        </div>
        <div class="paragraph">
          外围4盏
          <Span variant="cyan">聚光灯</Span>
          的运动周期为
          <Span variant="pink">8</Span>
          秒
        </div>
        <div class="paragraph">
          内部4盏
          <Span variant="cyan">聚光灯</Span>
          由于会再折返1次，运动周期为
          <Span variant="pink">16</Span>
          秒
        </div>
        <div class="paragraph">
          <Span variant="cyan">聚光灯</Span>
          的作用是处理
          <StratLink variant="yellow" href="#disco-infernal">{translations.discoInfernal}</StratLink>
          赋予的
          <BurnBabyBurn hover />
        </div>
        <div class="paragraph">
          场上同时只会有
          <Span variant="pink">4</Span>
          盏
          <Span variant="cyan">聚光灯</Span>
          停在安全格子上
        </div>
        <div class="paragraph">
          玩家需要在
          <BurnBabyBurn hover />
          倒计时结束时站进安全格子的
          <Span variant="cyan">聚光灯</Span>
          内
        </div>
      </div>
    </div>
  </div>
</MechanicSection>
<SolutionSection>
  <div class="flex flex-col gap-4">
    <div class="paragraph">仅需关注场中4块方格的初始状态，共2种模式</div>
    <div class="flex gap-4">
      <div class="flex max-w-112.5 shrink grow flex-col items-center gap-2">
        <Image
          src={funky_floor_solution_A}
          alt="Funky Floor Solution A"
          class="border-2 border-amber-800/75 dark:border-amber-100"
        />
        <div class="paragraph">模式1</div>
      </div>
      <div class="flex max-w-112.5 shrink grow flex-col items-center gap-2">
        <Image
          src={funky_floor_solution_B}
          alt="Funky Floor Solution B"
          class="border-2 border-amber-800/75 dark:border-amber-100"
        />
        <div class="paragraph">模式2</div>
      </div>
    </div>
    <div class="paragraph">
      远程组：
      <Separator orientation="vertical" class="mx-1 h-14 w-0.5 bg-teal-500" />
      <ul class="list-none space-y-4">
        <li class="paragraph">
          模式1：最终安全格为
          <Span variant="red">标点1</Span>
          和
          <Span variant="blue">标点3</Span>
          所在
          <Span variant="green">方格</Span>
        </li>
        <li class="paragraph">
          模式2：最终安全格为
          <Span variant="yellow">标点2</Span>
          和
          <Span variant="purple">标点4</Span>
          所在
          <Span variant="green">方格</Span>
        </li>
      </ul>
    </div>
    <div class="paragraph">
      近战组：先在
      <Span variant="pink">粉色点</Span>
      待机，等
      <BurnBabyBurn hover />
      倒计时快结束时，观察
      <Span variant="cyan">聚光灯</Span>
      会停在旁边哪个
      <Span variant="green">方格</Span>
      即可
    </div>
  </div>
</SolutionSection>
<NoteSection title="说明：解法底层原理详解">
  <div class="flex flex-col gap-4">
    <div class="paragraph">
      如前文所述：
      <Separator orientation="vertical" class="mx-1 h-14 w-0.5 bg-teal-500" />
      <ul class="list-disc space-y-4">
        <li class="paragraph">
          <Span variant="rose">地面AoE</Span>
          的变化周期为
          <Span variant="pink">8</Span>
          秒
        </li>
        <li class="paragraph">
          外围4盏
          <Span variant="cyan">聚光灯</Span>
          的变化周期为
          <Span variant="pink">8</Span>
          秒；内部4盏
          <Span variant="cyan">聚光灯</Span>
          的变化周期为
          <Span variant="pink">16</Span>
          秒
        </li>
      </ul>
    </div>
    <div class="paragraph">
      由于
      <Span variant="cyan">聚光灯</Span>
      周期是
      <Span variant="rose">地面AoE</Span>
      周期的整数倍
    </div>
    <div class="paragraph">
      因此
      <Span variant="cyan">聚光灯</Span>
      和
      <Span variant="rose">地面AoE</Span>
      的初始状态就决定了后续的所有变化
    </div>
    <div class="paragraph">
      而
      <Span variant="cyan">聚光灯</Span>
      和
      <Span variant="rose">地面AoE</Span>
      的初始状态仅有如下4种：
    </div>
    <div class="grid grid-cols-4 gap-2">
      <Image
        src={funky_floor_implementation_1}
        alt="Funky Floor Implementation 1"
        class="border-2 border-amber-800/75 dark:border-amber-100"
      />
      <Image
        src={funky_floor_implementation_2}
        alt="Funky Floor Implementation 2"
        class="border-2 border-amber-800/75 dark:border-amber-100"
      />
      <Image
        src={funky_floor_implementation_3}
        alt="Funky Floor Implementation 3"
        class="border-2 border-amber-800/75 dark:border-amber-100"
      />
      <Image
        src={funky_floor_implementation_4}
        alt="Funky Floor Implementation 4"
        class="border-2 border-amber-800/75 dark:border-amber-100"
      />
    </div>
    <div class="paragraph mt-8">
      以玩家被赋予
      <BurnBabyBurn hover tag="24" />
      和
      <BurnBabyBurn hover tag="32" />
      为始，约
      <Span variant="pink">4s</Span>
      后
      <Span variant="cyan">聚光灯</Span>
      和
      <Span variant="rose">地面AoE</Span>
      开始变化
    </div>
    <div class="paragraph mt-8">
      因此，对于
      <Span variant="rose">地面AoE</Span>
      ：
    </div>
    <div class="paragraph">
      <ListDot />
      <BurnBabyBurn hover tag="24" />
      和
      <BurnBabyBurn hover tag="32" />
      倒计时结束时，
      <Span variant="rose">地面AoE</Span>
      实际分别经历了
      <Span variant="pink">20s</Span>
      和
      <Span variant="pink">28s</Span>
      的变化时间
    </div>
    <div class="paragraph">
      <ListDot />
      亦即若干个完整周期 + 半个周期，这半个周期刚好会把危险地板和安全地板再交换1次
    </div>
    <div class="paragraph text-green-600 [text-shadow:_0_0_1px_var(--color-green-600)] dark:text-green-400">
      <ListDot />
      故初始危险地板即为
      <BurnBabyBurn hover />
      倒计时结束时的安全地板
    </div>
    <div class="paragraph mt-8">
      对于外围
      <Span variant="cyan">聚光灯</Span>
      ：
    </div>
    <div class="paragraph">
      <ListDot />
      1周期包含
      <Span variant="pink">4s</Span>
      运动和
      <Span variant="pink">4s</Span>
      停止，
      <BurnBabyBurn hover />
      倒计时结束时，
      <Span variant="cyan">聚光灯</Span>
      刚好处于停在四角
      <Span variant="pink">4s</Span>
      的阶段
    </div>
    <div class="paragraph">
      <ListDot />
      因此，若要找外围安全地板的
      <Span variant="cyan">聚光灯</Span>
      ，只需要去找四角的初始危险地板即可
    </div>
    <div class="paragraph mt-8">
      对于内场
      <Span variant="cyan">聚光灯</Span>
      ：
    </div>
    <div class="paragraph">
      <ListDot />
      1周期包含
      <Span variant="pink">4s</Span>
      运动至对侧、
      <Span variant="pink">4s</Span>
      停止在对侧、
      <Span variant="pink">4s</Span>
      运动回初始位置、再
      <Span variant="pink">4s</Span>
      停止在初始位置
    </div>
    <div class="paragraph">
      <ListDot />
      因此，
      <BurnBabyBurn hover tag="24" />
      倒计时结束时，
      <Span variant="cyan">聚光灯</Span>
      经历了
      <Span variant="pink">20s</Span>
      变化，处于停止在对侧
      <Span variant="pink">4s</Span>
      的阶段
    </div>
    <div class="paragraph pl-6">
      <ListDot />
      故
      <BurnBabyBurn hover tag="24" />
      应找初始无
      <Span variant="cyan">灯</Span>
      的危险地板（
      <Span variant="lime">①</Span>
      ）
    </div>
    <div class="paragraph">
      <ListDot />
      同理，
      <BurnBabyBurn hover tag="32" />
      倒计时结束时，
      <Span variant="cyan">聚光灯</Span>
      经历了
      <Span variant="pink">28s</Span>
      变化，处于停止在初始位置
      <Span variant="pink">4s</Span>
      的阶段
    </div>
    <div class="paragraph pl-6">
      <ListDot />
      故
      <BurnBabyBurn hover tag="32" />
      应找初始有
      <Span variant="cyan">灯</Span>
      的危险地板（
      <Span variant="lime">②</Span>
      ）
    </div>
    <div class="paragraph">
      而解法示意图中的
      <Span variant="pink">粉色点</Span>
      斜向相邻的两个
      <Span variant="green">方格</Span>
      恰好就是
      <Span variant="lime">①</Span>
      <Span variant="lime">②</Span>
      要找的危险地板
    </div>
  </div>
</NoteSection>

<script>
  import type { VideoSource } from 'pixi.js'

  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { getScale, YmToPx } from '@/pixi/utils'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkData } from '../_data/waymark'

  function calcSpotlightPositions(s: number) {
    let x1, y1, x2, y2
    if (s % 16 < 4) {
      x1 = -2.5
      y1 = -7.5 + 3.75 * (s % 8)
    } else if (s % 16 < 8) {
      x1 = -2.5
      y1 = 7.5
    } else if (s % 16 < 12) {
      x1 = 2.5
      y1 = -7.5 + 3.75 * (s % 8)
    } else {
      x1 = 2.5
      y1 = 7.5
    }
    if (s % 8 < 4) {
      x2 = -12.5 + 6.25 * (s % 8)
      y2 = -12.5
    } else {
      x2 = 12.5
      y2 = -12.5
    }
    return [
      { x: x1, y: y1 },
      { x: -x1, y: -y1 },
      { x: y1, y: -x1 },
      { x: -y1, y: x1 },
      { x: x2, y: y2 },
      { x: -x2, y: -y2 },
      { x: y2, y: -x2 },
      { x: -y2, y: x2 },
    ]
  }

  listenKeys($stratBoards, ['funky-floor'], async (stratBoards) => {
    const app = stratBoards['funky-floor']

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load('07/m5s/floor_2.png')
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    const funky_floor_texture = await Assets.load({
      src: '/videos/07/m5s/funky_floor@2x.mp4',
      data: {
        loop: true,
        updateFPS: 24,
      },
    })
    const funky_floor = Sprite.from(funky_floor_texture)
    funky_floor.anchor.set(0.5, 0.5)
    container.addChild(funky_floor)
    const funky_floor_source = funky_floor_texture.source as VideoSource
    const funky_floor_video = funky_floor_source.resource as HTMLVideoElement

    await setWaymark(container, waymarkData, 0.5)

    const squareMask = new Graphics()
    const width = 50 * YmToPx
    squareMask.rect(-width / 2, -width / 2, width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    const spotlightTexture = await Assets.load('07/m5s/spotlight.png')

    const spotlights = new Container()
    container.addChild(spotlights)

    let elapsedMS = 0
    app.ticker.add((ticker) => {
      if (funky_floor_video.paused) {
        funky_floor_video.play()
      }
      elapsedMS += ticker.elapsedMS

      const positions = calcSpotlightPositions(elapsedMS / 1000)

      spotlights.removeChildren()
      for (const position of positions) {
        const spotlight = new Sprite(spotlightTexture)
        spotlight.anchor.set(0.5, 0.5)
        spotlight.scale.set(getScale())
        spotlight.position.set(position.x * YmToPx, position.y * YmToPx)
        spotlights.addChild(spotlight)
      }
    })
  })
</script>

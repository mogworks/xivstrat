---
import type { Time } from '@/lib/utils'
import { Image } from 'astro:assets'

import MechanicSection from '@/components/section/MechanicSection.astro'
import SolutionSection from '@/components/section/SolutionSection.astro'
import StratBoard from '@/components/StratBoard.astro'
import Span from '@/components/Span.vue'
import DamageDown from '@/components/buff/DamageDown.astro'

import pos_img from '@/assets/07/m7s/sporesplosion/sporesplosion_pos.png'

import SporesplosionCast from '../_components/SporesplosionCast.astro'
import BrutishSwingCast from '../_components/BrutishSwingCast.astro'
import GlowerPowerCast from '../_components/GlowerPowerCast.astro'
import ElectrogeneticForceActivate from '../_components/ElectrogeneticForceActivate.astro'
import RevengeOfTheVinesCast from '../_components/RevengeOfTheVinesCast.astro'
import { translations } from '../_translations'
import EventSection from '@/components/section/EventSection.astro'
import RoleIcon from '@/components/RoleIcon.astro'
import ThornsOfDeathDebuff from '../_components/ThornsOfDeathDebuff.astro'
import P from '@/components/typography/P.astro'
import T from '@/components/typography/T.astro'
import Skill from '@/components/typography/Skill.astro'
import BruteAbombinator from '../_components/BruteAbombinator.astro'
import DamageInfo from '@/components/DamageInfo.astro'
import StratLink from '@/components/StratLink.astro'
import SporesplosionAppear from '../_components/SporesplosionAppear.astro'
import AttackSection from '../_components/BossAttackSection.astro'

interface Props {
  start: Time
}
const { start }: Props = Astro.props
const stoneringer = translations.stoneringer
const brutishSwing = translations.brutishSwing
const sporesplosion = translations.sporesplosion
---

<EventSection time="03:47.100">
  <BruteAbombinator />与<RoleIcon role="any" tag="一仇" />
  连线
  <ThornsOfDeathDebuff hover />消失
</EventSection>
<SporesplosionCast start={start} />
<AttackSection time="03:56.228" damage="57000" damageType="magical" />
<SporesplosionAppear start="03:52.311" num={1} />
<SporesplosionAppear start="03:54.314" num={2} />
<SporesplosionAppear start="03:56.317" num={3} />
<BrutishSwingCast start="03:58.320" />
<ElectrogeneticForceActivate time="04:11.101" />
<GlowerPowerCast start="04:07.275" />
<RevengeOfTheVinesCast start="04:12.084" />
<AttackSection time="04:19.128" damage="57000" damageType="magical" />
<AttackSection time="04:22.159" damage="57000" damageType="magical" />
<MechanicSection>
  <div class="flex flex-col gap-4">
    <T>
      <Skill name={sporesplosion} />
    </T>
    <P>
      <BruteAbombinator />读条完毕后<Span variant="pink">1s</Span>，场地上<Span variant="pink">分3组</Span
      >依次出现半径<Span variant="pink">8m</Span>的黄圈AoE（孢子）, 每组生成<Span variant="pink">6</Span>个，位置随机</P
    >
    <P
      >孢子出现<Span variant="pink">5s</Span>后对范围内的玩家造成<DamageInfo damage="121000" type="magical" />，并附加 <DamageDown
        tag="30"
        hover
      />
    </P>
    <h4 class="mt-4 text-2xl">
      <Span variant="yellow">孢子全部可能点位和出现示意</Span>
    </h4>
    <div class="grid grid-cols-2 gap-x-2 gap-y-4">
      <div class="flex flex-col items-center gap-1">
        <Image src={pos_img} alt="孢子生产位置分布参考" />
      </div>
      <div class="flex flex-col items-center gap-1">
        <StratBoard width={654} height={327} key="sporesplosion" canvasClass="h-full w-full" />
      </div>
    </div>
    <T class="mt-8">
      <Skill name={stoneringer} />
      +
      <Skill name={brutishSwing} />
    </T>
    <P>
      这一次
      <BruteAbombinator />
      必定连线其<Span variant="pink">对面</Span>的墙壁
    </P>
    <P>
      由于P2第一次
      <StratLink variant="yellow" href="#SBGR">
        {`${stoneringer} + ${translations.brutishSwing}`}
      </StratLink>
      时，
      <BruteAbombinator />
      一定连线场地长边的墙，故此处也一定连长边
    </P>
  </div>
</MechanicSection>
<SolutionSection title="解法">
  <div class="flex flex-col gap-4">
    <P>由黄圈间隔不算短，半径也不算大，不开疾跑也可以轻易走出范围</P>
    <P>因此，这里可以三穿一躲避，也可以三穿二、二穿一等</P>
    <P>
      如果
      <Skill name={stoneringer} />
      是弯刀（月环），那么可以有意识的提前往
      <BruteAbombinator />
      对侧长边靠近
    </P>
  </div>
</SolutionSection>

<script>
  import type { AnimationSequence } from 'motion'

  import { animate } from 'motion'
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { getScale, YmToPx } from '@/pixi/utils'
  import { $stratBoards } from '@/stores/stratBoards'

  const group1 = [
    { x: 100, y: -16.25 },
    { x: 108.5, y: -7.75 },

    { x: 91.5, y: 0.75 },
    { x: 100, y: 9.25 },
    { x: 91.5, y: 17.75 },

    { x: 108.5, y: 26.25 },
  ]
  const group2 = [
    { x: 91.5, y: -16.25 },
    { x: 100, y: -7.75 },

    { x: 108.5, y: 0.75 },
    { x: 108.5, y: 9.25 },
    { x: 100, y: 17.75 },

    { x: 91.5, y: 26.25 },
  ]
  const group3 = [
    { x: 108.5, y: -16.25 },
    { x: 91.5, y: -7.75 },

    { x: 100, y: 0.75 },
    { x: 91.5, y: 9.25 },
    { x: 108.5, y: 17.75 },

    { x: 100, y: 26.25 },
  ]

  function transferPos(p: { x: number; y: number }) {
    return {
      x: 1.2941 * p.y - 6.4706,
      y: -1.2529 * p.x - 0.0007 * p.y + 125.3141,
    }
  }

  listenKeys($stratBoards, ['sporesplosion'], async (stratBoards) => {
    const app = stratBoards.sporesplosion

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load('07/m7s/floor_p2_1.png')
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    container.addChild(floor)

    const rectMask = new Graphics()
    const width = floor.width
    const height = floor.height
    rectMask.rect(-width / 2, -height / 2, width, height)
    rectMask.fill({ color: 'white' })
    container.addChild(rectMask)
    container.mask = rectMask

    const fan_360_Texture = await Assets.load('omen/fan/360_r20.png')
    function createAoeSprites(group: { x: number; y: number }[]) {
      return group.map((p) => {
        const fan_360 = new Sprite(fan_360_Texture)
        const pos = transferPos(p)
        fan_360.anchor.set(0.5, 0.5)
        fan_360.scale.set(0)
        fan_360.alpha = 0
        fan_360.position.set(pos.x * YmToPx, pos.y * YmToPx)
        container.addChild(fan_360)
        return fan_360
      })
    }

    const groupSprites = [createAoeSprites(group1), createAoeSprites(group2), createAoeSprites(group3)]

    function showGroups(i: number) {
      groupSprites[i].forEach((omen) => {
        const sequence: AnimationSequence = [
          [omen.scale, { x: getScale() / 1.95, y: getScale() / 1.95 }, { duration: 0.25, at: 0 }],
          [omen, { alpha: 1 }, { duration: 0.25, at: 0 }],
          [omen, { alpha: 0 }, { duration: 0.25, at: 4.25 }],
          [omen.scale, { x: 0, y: 0 }, { duration: 0.1, at: 5 }],
        ]
        animate(sequence)
      })
    }

    let elapsed = 0
    app.ticker.add((ticker) => {
      elapsed += ticker.elapsedMS

      const phase = Math.floor(elapsed / 2000) % 6

      if (phase >= 1 && phase <= 3) {
        showGroups(phase - 1)
      }
    })
  })
</script>

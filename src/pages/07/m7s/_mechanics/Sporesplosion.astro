---
import type { Time } from '@/lib/utils'
import { Image } from 'astro:assets'

import MechanicSection from '@/components/section/MechanicSection.astro'
import NoteSection from '@/components/section/NoteSection.astro'
import SolutionSection from '@/components/section/SolutionSection.astro'
import StratBoard from '@/components/StratBoard.astro'
import Span from '@/components/Span.vue'
import DamageDown from '@/components/buff/DamageDown.astro'

import pos_img from '@/assets/07/m7s/sporesplosion/sporesplosion_pos.png'

import SporesplosionCast from '../_components/SporesplosionCast.astro'
import BrutishSwingCast from '../_components/BrutishSwingCast.astro'
import GlowerPowerCast from '../_components/GlowerPowerCast.astro'
import ElectrogeneticForceActivate from '../_components/ElectrogeneticForceActivate.astro'
import RevengeOfTheVinesCast from '../_components/RevengeOfTheVinesCast.astro'
import { translations } from '../_translations'
import GlowerPowerActivate from '../_components/GlowerPowerActivate.astro'
import BrutishSwingActivate from '../_components/BrutishSwingActivate.astro'
import EventSection from '@/components/section/EventSection.astro'
import RoleIcon from '@/components/RoleIcon.astro'
import ThornsOfDeathDebuff from '../_components/ThornsOfDeathDebuff.astro'
import RevengeOfTheVinesActivate from '../_components/RevengeOfTheVinesActivate.astro'
import P from '@/components/typography/P.astro'
import T from '@/components/typography/T.astro'
import Skill from '@/components/typography/Skill.astro'
import Tmp0 from '@/assets/07/m7s/Tmp.png'
import BruteAbombinator from '../_components/BruteAbombinator.astro'
import DamageInfo from '@/components/DamageInfo.astro'
import StratLink from '@/components/StratLink.astro'
import Quote from '@/components/typography/Quote.astro'
import ImgRow from '@/components/typography/ImgRow.astro'
import SporesplosionAppear from '../_components/SporesplosionAppear.astro'
import BrutishSwingMoveActivate from '../_components/BrutishSwingMoveActivate.astro'

interface Props {
  start: Time
}
const { start }: Props = Astro.props
const stoneringer = translations.stoneringer
const sporesplosion = translations.sporesplosion
---

<EventSection time="03:47.100">
  墙与<RoleIcon role="any" tag="一仇" />
  连线
  <ThornsOfDeathDebuff hover />消失
</EventSection>
<SporesplosionCast start={start} />
<SporesplosionAppear start="03:52.311" num={1} />
<SporesplosionAppear start="03:54.314" num={2} />
<SporesplosionAppear start="03:56.317" num={3} />
<BrutishSwingCast start="03:58.320" />
<BrutishSwingMoveActivate time="04:05.182" />
<BrutishSwingActivate time="04:06.386" />
<GlowerPowerCast start="04:07.275" />
<ElectrogeneticForceActivate time="04:11.101" />
<GlowerPowerActivate time="04:11.235" />
<RevengeOfTheVinesCast start="04:12.084" />
<RevengeOfTheVinesActivate time="04:17.078" />
<MechanicSection>
  <div class="flex flex-col gap-4">
    <T>
      <Skill name={sporesplosion} />
    </T>
    <P>
      <BruteAbombinator />读条完毕后<Span variant="pink">1s</Span>，场地上<Span variant="pink">分3组</Span
      >依次出现半径<Span variant="pink">8m</Span>的黄圈AoE（孢子）, 每组生成<Span variant="pink">6</Span>个，位置随机</P
    >
    <P
      >孢子出现<Span variant="pink">5s</Span>后对范围内的玩家造成<DamageInfo damage="121000" type="magical" />，并附加 <DamageDown
        tag="30"
        hover
      />
    </P>
    <h4 class="mt-4 text-2xl">
      <Span variant="yellow">孢子全部可能点位和出现示意</Span>
    </h4>
    <div class="grid grid-cols-2 gap-x-2 gap-y-4">
      <div class="flex flex-col items-center gap-1">
        <Image src={pos_img} alt="孢子生产位置分布参考" />
      </div>
      <div class="flex flex-col items-center gap-1">
        <StratBoard width={654} height={327} key="sporesplosion" canvasClass="h-full w-full" />
      </div>
    </div>
  </div>
  <div class="mt-8 flex flex-col gap-4">
    <P>
      <StratLink variant="yellow" href="#SBGR">SBGR的组合技</StratLink>与之前完全相同，不再赘述
    </P>
  </div>
</MechanicSection>
<NoteSection>
  <div class="flex flex-col gap-4">
    <P
      >这一次<BruteAbombinator />永远连线其对面的墙壁，由于P2第一次<StratLink variant="yellow" href="#SBGR"
        >SBGR</StratLink
      ><BruteAbombinator />一定连线场地长边的墙，故此处也一定连长边</P
    >
  </div>
</NoteSection>
<SolutionSection title="解法">
  <div class="flex flex-col gap-4">
    <P
      >观察黄圈预兆的范围，可以发现：
      <Quote variant="rose">
        <P>
          <Span variant="pink">场中</Span>每个黄圈的<Span variant="pink">圆心</Span>附近约<Span variant="pink"
            >1m x 1m</Span
          >的近似正方形</P
        >
        <P>
          <Span variant="pink">场边</Span>每个黄圈的<Span variant="pink">圆心</Span>沿<Span variant="pink"
            >垂直于场地边缘</Span
          >半径，向<Span variant="pink">场地外</Span>方向附近
        </P>
      </Quote>
    </P>
    <P
      >只会被孢子AoE覆盖<Span variant="pink">1次</Span>，因此这些区域在覆盖的孢子炸掉之后会成为<Span variant="pink"
        >安全区，如下图所示：</Span
      ></P
    >
    <ImgRow
      class="game-img"
      wrapperClass="max-w-150"
      bordered={false}
      imgs={[
        {
          src: Tmp0,
          alt: '场中安全区',
          title: '场中安全区',
        },
        {
          src: Tmp0,
          alt: '场边安全区',
          title: '场边安全区',
        },
      ]}
    />
    <P>
      第1组黄圈消失前，<RoleIcon role="all" tag="所有人" />站到不被<Span variant="pink">第1组</Span
      >黄圈炸到的地方，待上一组黄圈<Span variant="pink">消失</Span>后<Span variant="pink">2s</Span>内移动到安全区
    </P>
    <P>这里可以三穿一躲避，也可以三穿二，二穿一</P>
  </div>
</SolutionSection>

<NoteSection>
  <div class="flex flex-col gap-4">
    <P
      >如需减少移动，可以先根据<StratLink variant="yellow" href="#stoneringerP2">{stoneringer}</StratLink
      >的情况选择最终前往哪个安全区</P
    >
  </div>
</NoteSection>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import floor_img from '@/assets/07/m7s/sporesplosion/floor_p2_1@3x.png'
  import { getScale, YmToPx } from '@/pixi/utils'
  import { $stratBoards } from '@/stores/stratBoards'

  const group1 = [
    { x: 100, y: -16.25 },
    { x: 108.5, y: -7.75 },

    { x: 91.5, y: 0.75 },
    { x: 100, y: 9.25 },
    { x: 91.5, y: 17.75 },

    { x: 108.5, y: 26.25 },
  ]
  const group2 = [
    { x: 91.5, y: -16.25 },
    { x: 100, y: -7.75 },

    { x: 108.5, y: 0.75 },
    { x: 108.5, y: 9.25 },
    { x: 100, y: 17.75 },

    { x: 91.5, y: 26.25 },
  ]
  const group3 = [
    { x: 108.5, y: -16.25 },
    { x: 91.5, y: -7.75 },

    { x: 100, y: 0.75 },
    { x: 91.5, y: 9.25 },
    { x: 108.5, y: 17.75 },

    { x: 100, y: 26.25 },
  ]

  function transferPos(p: { x: number; y: number }) {
    return {
      x: 1.2941 * p.y - 6.4706,
      y: -1.2529 * p.x - 0.0007 * p.y + 125.3141,
    }
  }

  listenKeys($stratBoards, ['sporesplosion'], async (stratBoards) => {
    const app = stratBoards.sporesplosion

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    container.addChild(floor)

    const rectMask = new Graphics()
    const width = floor.width
    const height = floor.height
    rectMask.rect(-width / 2, -height / 2, width, height)
    rectMask.fill({ color: 'white' })
    container.addChild(rectMask)
    container.mask = rectMask

    const fan_360_Texture = await Assets.load('omen/fan/360_r20.png')
    function createAoeSprites(group: { x: number; y: number }[]) {
      return group.map((p) => {
        const fan_360 = new Sprite(fan_360_Texture)
        const pos = transferPos(p)
        fan_360.anchor.set(0.5, 0.5)
        fan_360.position.set(pos.x * YmToPx, pos.y * YmToPx)
        fan_360.scale.set(getScale() / 1.95)
        fan_360.visible = false // 初始不显示
        container.addChild(fan_360)
        return fan_360
      })
    }

    const groupSprites = [createAoeSprites(group1), createAoeSprites(group2), createAoeSprites(group3)]

    function showGroups(upToIndex: number) {
      for (let i = 0; i < groupSprites.length; i++) {
        const visible = i <= upToIndex
        groupSprites[i].forEach((sprite) => {
          sprite.visible = visible
        })
      }
    }

    let elapsed = 0
    app.ticker.add((ticker) => {
      elapsed += ticker.elapsedMS

      const phase = Math.floor(elapsed / 2000) % 4

      if (phase < 3) {
        showGroups(phase)
      } else {
        showGroups(-1)
      }
    })
  })
</script>

---
import type { RoleType, CombinedRoleType } from '@/lib/role'

import CombinedIcon from '@/components/CombinedIcon.astro'
import EntityIcon from '@/components/EntityIcon.astro'
import EntityText from '@/components/EntityText.astro'

import any from '/pixi/role/any.png?url'
import all from '/pixi/role/all.png?url'
import tank from '/pixi/role/tank.png?url'
import healer from '/pixi/role/healer.png?url'
import dps from '/pixi/role/dps.png?url'
import melee from '/pixi/role/melee.png?url'
import ranged from '/pixi/role/ranged.png?url'
import magic from '/pixi/role/magic.png?url'
import ranged_magic from '/pixi/role/ranged_magic.png?url'
import boss from '/pixi/enemy/061712.png?url'
import enemy_level1 from '/pixi/enemy/061707.png?url'

interface Props {
  role: RoleType | CombinedRoleType
  tag?: 'MT' | 'ST' | 'OT' | 'H1' | 'H2' | 'D1' | 'D2' | 'D3' | 'D4' | 'BOSS' | string
  class?: string
}

const tagHandler = (tag: string): string => {
  // 添加文本使攻略行文通顺
  if (['最近', '最远', '随机', '点名'].includes(tag)) return `${tag}目标`
  else return tag
}

const { role = 'any', tag = '', class: className = '' }: Props = Astro.props
const img = {
  any,
  all,
  tank,
  healer,
  dps,
  melee,
  ranged,
  magic,
  ranged_magic,
  boss,
  enemy_level1,
  'tank|healer': [tank, healer],
  'healer|tank': [healer, tank],
  'tank|dps': [tank, dps],
  'dps|tank': [dps, tank],
  'healer|dps': [healer, dps],
  'dps|healer': [dps, healer],
}[role]
const text =
  tagHandler(tag) ||
  {
    any: '任一角色',
    all: '全员',
    tank: 'T',
    healer: 'H',
    dps: 'D',
    melee: '近战',
    ranged: '远敏',
    magic: '法系',
    ranged_magic: '远程',
    boss: '', // 敌对生物slot都包含名称，直接隐藏图标
    enemy_level1: '',
    'tank|healer': 'T/H',
    'healer|tank': 'H/T',
    'tank|dps': 'T/D',
    'dps|tank': 'D/T',
    'healer|dps': 'H/D',
    'dps|healer': 'D/H',
  }[role]
---

{
  role.includes('|') ? (
    <EntityIcon icon="" tag={tag} alt={tag ?? role} class={className}>
      <CombinedIcon slot="icon" img1={img[0]} img2={img[1]} tag={tag} alt={tag ?? role} />
      <slot />
    </EntityIcon>
  ) : (
    <EntityIcon icon={img as string | ImageMetadata} tag={tag} alt={tag ?? role} class={className}>
      <slot />
    </EntityIcon>
  )
}
<EntityText class={className}>{text}<slot /></EntityText>
